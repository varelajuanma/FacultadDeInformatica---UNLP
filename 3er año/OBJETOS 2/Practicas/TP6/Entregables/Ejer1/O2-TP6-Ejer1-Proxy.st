Object subclass: #Autenticacion	instanceVariableNames: 'estaLogueado'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP6-Ejer1-Proxy'!!Autenticacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 11:10'!estaLogueado	^ estaLogueado ! !!Autenticacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 11:31'!noEstaLogueado	estaLogueado := false! !!Autenticacion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 11:32'!siEstaLogueado	estaLogueado := true! !Object subclass: #DatabaseAccess	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP6-Ejer1-Proxy'!!DatabaseAccess methodsFor: 'as yet unclassified' stamp: 'DiegoTowers 5/19/2019 16:56'!getSearchResults: queryString	"returns a dataTable with the results of the strings."	self subclassResponsibility .! !!DatabaseAccess methodsFor: 'as yet unclassified' stamp: 'DiegoTowers 5/19/2019 16:56'!insertNewRow: rowData	"Inserts in the database the row data"	self subclassResponsibility .! !DatabaseAccess subclass: #DatabaseRealAcess	instanceVariableNames: 'data currentId'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP6-Ejer1-Proxy'!!DatabaseRealAcess methodsFor: 'accessing' stamp: 'Anonymous 6/9/2020 12:52'!data ^data! !!DatabaseRealAcess methodsFor: 'as yet unclassified' stamp: 'DiegoTowers 5/19/2019 16:19'!getSearchResults: queryString	"returns a dataTable with the results of the strings. This is a mock implementation just for the exercise."		  ^ data at:queryString ifAbsent: #().	! !!DatabaseRealAcess methodsFor: 'as yet unclassified' stamp: 'DiegoTowers 5/19/2019 16:38'!insertNewRow: rowData	"Inserts in the database the row data"	data		at: 'select * from comics where id=' , currentId printString		put: rowData.	currentId := currentId + 1.	^ currentId - 1! !!DatabaseRealAcess methodsFor: 'initialization' stamp: 'DiegoTowers 5/20/2019 15:46'!initialize	|spiderman batman|	data:= Dictionary new.	spiderman:= #('Spiderman' 'Marvel').	batman:= #('Batman' 'DC comics').	currentId:= 3.	data at:'select * from comics where id=1'  put: spiderman.	data at:'select * from comics where id=2'  put: batman.! !TestCase subclass: #DatabaseRealAcessTest	instanceVariableNames: 'database autenticacion'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP6-Ejer1-Proxy'!!DatabaseRealAcessTest methodsFor: 'tests' stamp: 'Anonymous 6/9/2020 14:51'!testGetSearchResults	"comment stating purpose of message"	self		assert: (database getSearchResults: 'select * from comics where id=1')		equals: #('Spiderman' 'Marvel').	self		assert: (database getSearchResults: 'select * from comics where id=10') equals: #()! !!DatabaseRealAcessTest methodsFor: 'tests' stamp: 'Anonymous 6/9/2020 14:51'!testInsertNewRow	"comment stating purpose of message"	| rowData |	rowData := #('Paturuzu' 'La flor').	self assert: (database insertNewRow: rowData) == 3.	self		assert:			(database getSearchResults: 'select * from comics where id=3')				equals: rowData! !!DatabaseRealAcessTest methodsFor: 'running' stamp: 'Anonymous 6/11/2020 11:32'!setUp	"Hooks that subclasses may override to define the fixture of test."	database := DatabaseRealAcess new.	autenticacion := Autenticacion new.	autenticacion := autenticacion siEstaLogueado.	database := ProtectionProxy crearRealData: database Y: autenticacion! !DatabaseAccess subclass: #ProtectionProxy	instanceVariableNames: 'realData currentId autenticacion'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP6-Ejer1-Proxy'!!ProtectionProxy methodsFor: 'accessing' stamp: 'Anonymous 6/11/2020 11:28'!autenticacion: unaAutenticacionautenticacion := unaAutenticacion ! !!ProtectionProxy methodsFor: 'accessing' stamp: 'Anonymous 6/11/2020 10:04'!insertNewRow: rowData	"Inserts in the database the row data"	self checkAccess		ifTrue: [ ^ realData insertNewRow: rowData ]! !!ProtectionProxy methodsFor: 'accessing' stamp: 'Anonymous 6/9/2020 12:15'!realData: aData	realData := aData! !!ProtectionProxy methodsFor: 'accessing' stamp: 'Anonymous 6/9/2020 12:51'!currentId: unIdcurrentId := unId! !!ProtectionProxy methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 10:04'!getSearchResults: queryString	"returns a dataTable with the results of the strings. This is a mock implementation just for the exercise."	self checkAccess		ifTrue: [ ^ realData getSearchResults: queryString ]! !!ProtectionProxy methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 11:12'!checkAccess	^ autenticacion estaLogueado ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ProtectionProxy class	instanceVariableNames: ''!!ProtectionProxy class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 11:28'!crearRealData: aData Y: unaAutenticacion	^ self new		realData: aData;		autenticacion: unaAutenticacion;		currentId: 3! !!ProtectionProxy class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/9/2020 12:53'!crearRealData: aData	^ self new		realData: aData;		currentId: 3! !