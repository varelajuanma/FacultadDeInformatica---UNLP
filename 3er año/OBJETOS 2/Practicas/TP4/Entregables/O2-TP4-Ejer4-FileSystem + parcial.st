Object subclass: #Contenido	instanceVariableNames: 'nombre fechaDeCreacion tamaño'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP4-Ejer4-FileSystem'!!Contenido methodsFor: 'testing' stamp: 'Anonymous 7/14/2020 16:51'!isFile ^false! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 18:09'!sumar	^ 0! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:30'!fechaDeCreacion: unaFechafechaDeCreacion := unaFecha! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:29'!nombre: unNombre	nombre := unNombre.! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 18:18'!perteneceA: unDirectorio	"Retorna True si el receptor se encuentra en el directorio o en algun subdirectorio alcanzable desde el directorio (en cualquier nivel). Para el caso de los linkSimbolicos retorna true si tanto el link como el archivo apuntado cumplen la condicion"	^ 	unDirectorio incluyeA: self! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 16:52'!todosLosArchivos	| listaConUnSoloArchivo |	listaConUnSoloArchivo := OrderedCollection new.	listaConUnSoloArchivo add: self.	^ listaConUnSoloArchivo! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:58'!tamaño: unTamaño tamaño := unTamaño ! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 18:35'!tamañoTotalOcupado ^ tamaño! !!Contenido methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:58'!tamaño^tamaño! !!Contenido methodsFor: 'accessing' stamp: 'Anonymous 6/11/2020 19:02'!fechaDeCreacion^fechaDeCreacion ! !!Contenido methodsFor: 'accessing' stamp: 'Anonymous 6/11/2020 19:02'!nombre^nombre! !Contenido subclass: #Archivo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP4-Ejer4-FileSystem'!!Archivo methodsFor: 'testing' stamp: 'Anonymous 7/14/2020 16:50'!isFile^true! !!Archivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 19:42'!sumar^ 1! !!Archivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 16:53'!agregarContenidoA: unListado seguidoDe: path	"^ String new"! !!Archivo methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 18:33'!incluyeA: unContenido	^ self = unContenido! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Archivo class	instanceVariableNames: ''!!Archivo class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:31'!llamado: unString creadoEl: unaFecha kBytes: unNumero	"Método de clase. Crea un nuevo archivo con nombre unString, de unNumero kBytes yen la fecha unaFecha."	^ self new		nombre: unString;		 fechaDeCreacion: unaFecha;		tamaño: unNumero;		yourself! !Contenido subclass: #Directorio	instanceVariableNames: 'contenidos'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP4-Ejer4-FileSystem'!!Directorio methodsFor: 'accessing' stamp: 'Anonymous 6/11/2020 19:11'!contenidos^ contenidos ! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 17:45'!agregarContenidoA: unListado seguidoDe: pathAnterior	| path |	unListado << Character cr asString.	path := pathAnterior , self agregarRaiz .	unListado << path.	unListado << self agregarCantidadDeArchivos.	contenidos		do:			[ :component | component agregarContenidoA: unListado seguidoDe: path ]! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 19:53'!agregarCantidadDeArchivos	| cantArchivos |	cantArchivos := 0.	contenidos do: [ :c | cantArchivos := cantArchivos + c sumar ].	cantArchivos > 0		ifTrue: [ ^ ' (' , cantArchivos asString , ' archivos)' ]		ifFalse: [ ^ '' ]! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/15/2020 10:34'!agregar: unContenido	contenidos add: unContenido! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 17:43'!listadoDeContenido	"Retorna un string con el listado del contenido del directorio imprimiendo elpath completo de cada elemento (similar al comando pwd de linux) siguiendo elmodelo presentado a continuación:/Directorio A/Directorio A/Directorio A.1/Directorio A/Directorio A.1/Directorio A.1.1 (3 archivos)/Directorio A/Directorio A.1/Directorio A.1.2 (2 archivos)/Directorio A/Directorio A.2/Directorio B"	| listadoStream path |	listadoStream := WriteStream on: String new.	path := self agregarRaiz.	listadoStream << path.	listadoStream << self agregarCantidadDeArchivos.	contenidos		do:			[ :component | component agregarContenidoA: listadoStream seguidoDe: path ].	^ listadoStream contents! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 10:36'!agregarRaiz	^ '/' , nombre! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 18:36'!tamañoTotalOcupado	"Retorna el espacio total ocupado en KB, incluyendo su contenido."	^ self tamaño		+ (self contenidos sum: [ :cont | cont tamañoTotalOcupado ])! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 20:16'!archivoMasGrande	"Retorna el archivo con mayor cantidad de bytes en cualquier nivel del filesystemcontenido por directorio receptor."		| coleccionOrdenadaPorPeso |	coleccionOrdenadaPorPeso := self todosLosArchivos		asSortedCollection: [ :a :b | a tamaño > b tamaño ].	coleccionOrdenadaPorPeso isEmpty		ifTrue: [ ^ false ]		ifFalse: [ ^ coleccionOrdenadaPorPeso at: 1 ]! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 20:16'!archivoMasNuevo	"retorna el archivo con fecha de creacion más reciente en cualquier nivel delfilesystem contenido por directorio receptor."		| coleccionOrdenadaPorFecha |	coleccionOrdenadaPorFecha := self todosLosArchivos		asSortedCollection: [ :a :b | a fechaDeCreacion > b fechaDeCreacion ].	coleccionOrdenadaPorFecha isEmpty		ifTrue: [ ^ false ]		ifFalse: [ ^ coleccionOrdenadaPorFecha at: 1 ]! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 18:20'!incluyeA: unContenido	^ self = unContenido		or: [ contenidos				detect: [ :elem | elem incluyeA: unContenido  ]				ifFound: [ true ]				ifNone: [ false ] ]! !!Directorio methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 20:08'!todosLosArchivos	| listaDeArchivos |	listaDeArchivos := contenidos		flatCollect: [ :cont | cont todosLosArchivos ].	^ listaDeArchivos! !!Directorio methodsFor: 'initialization' stamp: 'Anonymous 6/26/2020 18:54'!initialize	super initialize.	contenidos := OrderedCollection new.	tamaño := 32! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Directorio class	instanceVariableNames: ''!!Directorio class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:31'!llamado: unString creadoEl: unaFecha	"Método de clase. Crea un nuevo Directorio con nombre unString y en la fechaunaFecha."	^ self new		nombre: unString;		fechaDeCreacion: unaFecha;		yourself! !TestCase subclass: #DirectorioTest	instanceVariableNames: 'vacio conUnArchivo conVariosArchivos conSubdirectorios config grande backup2015 link conUnArchivoSimbolico archiSimbolico raiz archivoA linkC directorioB resulPertenece'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP4-Ejer4-FileSystem'!!DirectorioTest methodsFor: 'tests' stamp: 'Anonymous 6/11/2020 19:01'!testArchivoMasNuevo	self assert: conSubdirectorios archivoMasNuevo equals: backup2015! !!DirectorioTest methodsFor: 'tests' stamp: 'Anonymous 6/12/2020 17:30'!testArchivoMasGrande	self assert: conSubdirectorios archivoMasGrande tamaño equals: 240000000! !!DirectorioTest methodsFor: 'tests' stamp: 'Anonymous 7/16/2020 18:51'!testPerteneceA	| test1 test2 test3 |	test1 := config perteneceA: conUnArchivo.	test2 := vacio perteneceA: vacio.	test3 := link perteneceA: conUnArchivoSimbolico.	resulPertenece := linkC perteneceA: directorioB.	self assert: resulPertenece equals: false.	self assert: test1 equals: true.	self assert: test2 equals: true.	self assert: test3 equals: false! !!DirectorioTest methodsFor: 'tests' stamp: 'Anonymous 7/16/2020 18:35'!testTamañoTotalOcupado	self assert: conUnArchivo tamañoTotalOcupado equals: 160.	self assert: conUnArchivoSimbolico tamañoTotalOcupado equals: 33.	self assert: conSubdirectorios tamañoTotalOcupado equals: 256690128! !!DirectorioTest methodsFor: 'running' stamp: 'Anonymous 7/14/2020 17:59'!testListadoDeContenido	| listado listadoStream |	self assert: vacio listadoDeContenido equals: '/home'.	self		assert: conUnArchivo listadoDeContenido		equals: '/var (1 archivos)'.	self assert: conUnArchivoSimbolico listadoDeContenido equals: '/simb'.	self		assert: conVariosArchivos listadoDeContenido		equals: '/tmp (4 archivos)'.	listadoStream := WriteStream on: String new.	listadoStream		<< '/log (1 archivos)';		cr.	listadoStream		<< '/log/mysql (4 archivos)';		cr.	listadoStream		<< '/log/mysql/older (1 archivos)';		cr.	listadoStream << '/log/postgres (3 archivos)'.	listado := listadoStream contents.	self assert: conSubdirectorios listadoDeContenido equals: listado! !!DirectorioTest methodsFor: 'running' stamp: 'Anonymous 7/16/2020 18:33'!setUp	| date |	date := '2015-01-01'.	"Directorio vacío"	vacio := Directorio llamado: 'home' creadoEl: date.	"Directorio con un solo archivo"	conUnArchivo := Directorio llamado: 'var' creadoEl: date.	config := Archivo		llamado: 'config.bak'		creadoEl: '2016-04-02' asDate		kBytes: 128.	conUnArchivo agregar: config.	"Directorio con un solo archivo pero apuntado por un linkSimbolico"	conUnArchivoSimbolico := Directorio llamado: 'simb' creadoEl: date.	archiSimbolico := Archivo		llamado: 'simb.bak'		creadoEl: '2016-04-02' asDate		kBytes: 128.	link := LinkSimbolico llamado: 'link.png' apuntandoA: archiSimbolico.	conUnArchivoSimbolico agregar: link.	"Directorio con varios archivos, pero sin subdirectorios"	conVariosArchivos := Directorio llamado: 'tmp' creadoEl: date.	grande := Archivo		llamado: 'grande.tmp'		creadoEl: '2016-04-02' asDate		kBytes: 2000000.	conVariosArchivos		agregar: (Archivo llamado: 'nada.tmp' creadoEl: '2015-05-01' asDate kBytes: 0);		agregar:			(Archivo llamado: 'chico.tmp' creadoEl: '2013-06-03' asDate kBytes: 10);		agregar: grande;		agregar:			(Archivo				llamado: 'mediano.tmp'				creadoEl: '1995-11-23' asDate				kBytes: 10000).	"Directorio con subdirectorios, archivos, y archivos dentro de los subdirectorios"	conSubdirectorios := Directorio llamado: 'log' creadoEl: date.	backup2015 := Archivo		llamado: '2015.zip'		creadoEl: '2016-04-06' asDate		kBytes: 240000000.	conSubdirectorios		agregar:			(Archivo				llamado: 'sys.log'				creadoEl: '2015-03-03' asDate				kBytes: 90000);		agregar:			((Directorio llamado: 'mysql' creadoEl: date)				agregar:					(Archivo						llamado: 'mysql01.log'						creadoEl: '2015-12-03' asDate						kBytes: 1200000);				agregar:					(Archivo						llamado: 'mysql02.log'						creadoEl: '2014-03-03' asDate						kBytes: 2000000);				agregar:					(Archivo						llamado: 'mysql03.log'						creadoEl: '2013-03-21' asDate						kBytes: 2000000);				agregar:					(Archivo						llamado: 'mysql04.log'						creadoEl: '2014-07-15' asDate						kBytes: 2000000);				agregar:					((Directorio llamado: 'older' creadoEl: date)						agregar: backup2015;						yourself);				yourself);		agregar:			((Directorio llamado: 'postgres' creadoEl: date)				agregar:					(Archivo						llamado: 'pg01.log'						creadoEl: '2015-04-12' asDate						kBytes: 1400000);				agregar:					(Archivo						llamado: 'pg02.log'						creadoEl: '2016-03-08' asDate						kBytes: 4000000);				agregar:					(Archivo						llamado: 'pg03.log'						creadoEl: '2016-02-13' asDate						kBytes: 4000000);				yourself).	"Directorio Raiz con archivo A y un directorio B. Directorio B tiene un link simbolico de nombre C que apunta a archivo A (ubicado en la raiz). Preguntar al link simbolico si pertenece al directorio B deberia dar false"	raiz := Directorio llamado: 'directorioRaiz' creadoEl: date.	archivoA := Archivo		llamado: 'archiA.png'		creadoEl: '2016-04-02' asDate		kBytes: 128.	raiz agregar: archivoA.	directorioB := Directorio llamado: 'directorioB' creadoEl: date.	raiz agregar: directorioB.	linkC := LinkSimbolico llamado: 'linkC' apuntandoA: archivoA.	directorioB agregar: linkC.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DirectorioTest class	instanceVariableNames: 'config link'!!DirectorioTest class methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/11/2020 19:01'!llamado: nombre creadoEl: date^ self new initialize:nombre creado: date.! !Contenido subclass: #LinkSimbolico	instanceVariableNames: 'fileSystemElement'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP4-Ejer4-FileSystem'!!LinkSimbolico methodsFor: 'initialization' stamp: 'Anonymous 6/26/2020 18:50'!initialize	super initialize.	tamaño := 1! !!LinkSimbolico methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:32'!fileSystemElement^ fileSystemElement ! !!LinkSimbolico methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/26/2020 17:30'!fileSystemElement: aFileSystemElement	fileSystemElement := aFileSystemElement! !!LinkSimbolico methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 16:54'!agregarContenidoA: unListado seguidoDe: path	! !!LinkSimbolico methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 18:47'!incluyeA: unContenido	^ self = unContenido and: [ self fileSystemElement = unContenido ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LinkSimbolico class	instanceVariableNames: ''!!LinkSimbolico class methodsFor: 'as yet unclassified' stamp: 'Anonymous 7/16/2020 17:05'!llamado: linkName apuntandoA: aFileSystemElement	"Crea un link simbólico sólo si el argumento es un archivo, en caso contrario arroja un error (self error: 'Mensaje de error'). "	aFileSystemElement isFile		ifTrue: [ ^ self new				nombre: linkName;				fileSystemElement: aFileSystemElement;				yourself ]		ifFalse: [ self error: 'Mensaje de error' ]! !