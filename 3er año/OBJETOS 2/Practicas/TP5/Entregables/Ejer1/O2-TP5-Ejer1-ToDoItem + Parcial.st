Object subclass: #ToDoItem	instanceVariableNames: 'name comments time state finishTime'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!ToDoItem methodsFor: 'initialization' stamp: 'Anonymous 6/1/2020 12:33'!initializesuper initialize .	comments := OrderedCollection new! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:12'!state	^ state! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:50'!finishTime^finishTime ! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:50'!finishTime: aTimefinishTime := aTime! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:41'!addComment: comment	"Dado el estado agrega un comentario"	state addComment: comment to: self! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:09'!name: aName	name := aName! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:49'!startTime	^ time! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:28'!start	"Pasa el ToDoItem a in-progress (siempre y cuando el estado actual sea pending, si se encuentra en otro estado, no hace nada)"	state start: self	! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:22'!state: aState state := aState! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:48'!startTime: aTime	time := aTime! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:37'!comments	^ comments! !!ToDoItem methodsFor: 'accessing' stamp: 'Anonymous 6/26/2020 10:23'!name^ name! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 18:52'!alert	state alert: self! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/20/2020 16:27'!relax	state relax: self! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/1/2020 11:32'!togglePaused	"Pasa la tarea a paused si su estado es in-progress, o a in-progress si su estado es paused. Caso contrario (pending o finish) genera un error informando la causa especifica del mismo"	state togglePaused: self.	! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/1/2020 11:34'!workedTime"Retorna el tiempo que transcurrio desde que se inicio la tarea (start) hasta que se finalizo. En caso de que no este finalizada, hasta el actual. Si la tarea no se inicio genera un error informando la causa especifica del mismo"state workedTime: self.! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/1/2020 11:33'!finish"Pasa el ToDoItem a finished (siempre y cuando su estado actual sea in-progress o paused, si se encuentra en otro estado, no hace nada)"	state finish: self.! !!ToDoItem methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 18:20'!canceled	state canceled: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ToDoItem class	instanceVariableNames: ''!!ToDoItem class methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:22'!name: aName	"Instancia un ToDoItem nuevo en estado pending con aName como nombre"	^ self new		name: aName;		state: (PendingState new);		yourself! !Object subclass: #ToDoState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!ToDoState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 18:33'!canceled: unItem	unItem state: CanceledState new.	unItem finishTime: DateAndTime now! !!ToDoState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:28'!relax: unItem	self subclassResponsibility! !!ToDoState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:28'!alert: unItem	self subclassResponsibility! !!ToDoState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:28'!togglePaused: unItem	self subclassResponsibility! !!ToDoState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:26'!addComment: comment to: unItem	unItem addComment: comment! !!ToDoState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:52'!workedTime: unItem	^ DateAndTime now - unItem startTime! !!ToDoState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 17:16'!finish: unItem	self subclassResponsibility! !!ToDoState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:28'!start: unItem	self subclassResponsibility! !ToDoState subclass: #AlertState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!AlertState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 18:37'!relax: unItem	unItem state: InProgressState new! !!AlertState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/20/2020 16:38'!alert: unItem	self canceled: unItem ! !!AlertState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:31'!finish: unItem! !!AlertState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:32'!togglePaused: unItem	! !!AlertState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:31'!start: unItem	! !ToDoState subclass: #CanceledState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!CanceledState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 18:30'!finish: unItem	self		error: 'No es posible finalizar una tarea que se ha cancelado'! !!CanceledState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 18:31'!togglePaused: unItem	self error: 'No es posible pausar una tarea que se ha cancelado'! !!CanceledState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/12/2020 18:30'!start: unItem	self error: 'No es posible iniciar una tarea que se ha cancelado'! !!CanceledState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:33'!relax: unItem! !!CanceledState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:33'!alert: unItem	! !ToDoState subclass: #FinishedState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!FinishedState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/20/2020 16:36'!togglePaused: unItem	self error: 'No es posible pausar una tarea en estado finalizada'! !!FinishedState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:32'!finish: unItem	! !!FinishedState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 12:14'!addComment: comment to: item	self error: 'No es posible agregar un comentario a una tarea en estado finalizada'! !!FinishedState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 12:14'!workedTime: unItem	^ ((unItem finishTime) - (unItem startTime ))! !!FinishedState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:34'!start: unItem	! !!FinishedState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:34'!alert: unItem! !!FinishedState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:34'!relax: unItem	! !ToDoState subclass: #InProgressState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!InProgressState methodsFor: 'accessing' stamp: 'Anonymous 6/12/2020 18:36'!alert: unItem	unItem state: AlertState new.! !!InProgressState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:35'!relax: unItem	! !!InProgressState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 12:04'!togglePaused: unItemunItem state: PausedState new.! !!InProgressState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 12:08'!finish: unItem	unItem state: FinishedState new.	unItem finishTime: DateAndTime now.! !!InProgressState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:34'!start: unItem! !ToDoState subclass: #PausedState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!PausedState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:35'!relax: unItem	! !!PausedState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:35'!alert: unItem	! !!PausedState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 12:03'!togglePaused: unItem unItem state: InProgressState new.! !!PausedState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 12:06'!finish: unItem	unItem state: FinishedState new.	unItem finishTime: DateAndTime now. ! !!PausedState methodsFor: 'accessing' stamp: 'Anonymous 6/20/2020 16:35'!start: unItem! !ToDoState subclass: #PendingState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Model'!!PendingState methodsFor: 'accessing' stamp: 'Anonymous 6/1/2020 11:48'!start: unItem	unItem state: InProgressState new.	unItem startTime: DateAndTime now.! !!PendingState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/20/2020 16:36'!togglePaused: unItem	self error: 'No es posible pausar una tarea que no se ha iniciado'! !!PendingState methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/1/2020 12:12'!workedTime: unItem	self error: 'La tarea aun no ha iniciado'! !!PendingState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:36'!finish: unItem	! !!PendingState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:35'!alert: unItem	! !!PendingState methodsFor: 'services' stamp: 'Anonymous 6/20/2020 16:45'!relax: unItem! !TestCase subclass: #ToDoItemTest	instanceVariableNames: 'pendingToDoItem inProgressToDoItem pausedToDoItem finishedToDoItem'	classVariableNames: ''	poolDictionaries: ''	category: 'O2-TP5-Ejer1-ToDoItem + Parcial-Test'!!ToDoItemTest methodsFor: 'running' stamp: 'Anonymous 7/15/2020 10:20'!setUp	"Hooks that subclasses may override to define the fixture of test."	pendingToDoItem := ToDoItem name: 'estado started'.	inProgressToDoItem := ToDoItem name: 'estado in progress'.	pausedToDoItem := ToDoItem name: 'estado pausado'.	finishedToDoItem := ToDoItem name: 'estado finalizado'.	inProgressToDoItem state: InProgressState new.	pausedToDoItem state: PausedState new.	finishedToDoItem state: FinishedState new! !!ToDoItemTest methodsFor: 'tests' stamp: 'Anonymous 7/15/2020 10:19'!testName	| aName oneToDoItem |	aName := 'first todo'.	oneToDoItem := ToDoItem name: aName.	self assert: oneToDoItem name equals: aName.	self assert: oneToDoItem state class equals: PendingState.	self assert: oneToDoItem comments class equals: OrderedCollection! !!ToDoItemTest methodsFor: 'tests' stamp: 'Anonymous 7/15/2020 10:26'!testTogglePaused	inProgressToDoItem togglePaused.	pausedToDoItem togglePaused.	self assert: inProgressToDoItem state class equals: PausedState.	self assert: pausedToDoItem state class equals: InProgressState.	self should: [ pendingToDoItem togglePaused ] raise: Error.	self should: [ finishedToDoItem togglePaused ] raise: Error! !!ToDoItemTest methodsFor: 'tests' stamp: 'Anonymous 7/15/2020 10:25'!testFinish	pendingToDoItem finish.	inProgressToDoItem finish.	pausedToDoItem finish.	finishedToDoItem finish.	self assert: pendingToDoItem state class equals: PendingState.	self assert: inProgressToDoItem state class equals: FinishedState.	self assert: pausedToDoItem state class equals: FinishedState.	self assert: finishedToDoItem state class equals: FinishedState! !!ToDoItemTest methodsFor: 'tests' stamp: 'Anonymous 7/15/2020 10:20'!testStart	pendingToDoItem start.	self assert: pendingToDoItem state class equals: InProgressState! !